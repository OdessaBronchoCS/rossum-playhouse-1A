

/*  LineTrack.txt                        12 Dec 1999

    Simple floor plan for testing line-follower

    This encoding is based on the RP1 rev 0.46 floor plan format.

    This floorplan is intended for the simulation of a line-following
    robot.  It was inspired by the the game course for the
    Connecticut Robotics Society (CRS) Line-Following Robot Contest.
    The CRS contest follows the same rules as most other line-following
    contests. Robots are equipped with optical sensors which allow them to
    follow a 3/4 inch track.

    The "race-track" design for this floor plan was created
    by writing a quick-and-dirty Java application is included
    for your reference.   The application used a table of curves
    to generate coordinates for two nested polygons which formed
    a track 3/4 inch wide (0.059 meters).

    You will note that RP1 server (rev 0.46) is painfully slow to load this
    particular floor plan.   There appears to be at least one
    very inefficient module in the floor-plan parsing code which
    causes it to take an unreasonably long time processing the
    specifications for the paint polygons.   If anyone discovers
    the source of the problem, please let me know.

    The Java application -----------------------------------------

      import java.lang.*;
      import java.text.*;

      public class Junk
      {
         public static void main(String[] args)  throws Exception {
            Junk junk = new Junk();
            junk.printTrack();
         }

         public void printTrack(){
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMaximumFractionDigits(4);
            nf.setMinimumFractionDigits(4);
            nf.setMaximumIntegerDigits(2);
            nf.setMinimumIntegerDigits(1);
            // define the turn table (units are meters and degrees)
            double d[] = {
             //  xCenter  yCenter  radius  startAngle   endAngle
                  0.875,   0.125,   0.125,   270,        360,
                  0.875,   0.25,    0.125,     0,         90,
                  0.75,    0.5,     0.125,   270,        180,  // a right turn
                  0.5,     0.625,   0.125,     0,         90,
                  0.25,    0.5,     0.25,     90,        180,
                  0.25,    0.25,    0.25,    180,        270
               };

            double increment = 5;  // five degree increments
            int nTurn = d.length/5;
            double adjustment=0.009525;  // 1/2 of a 3/4 inch track
            for(int iSide=-1; iSide<=1; iSide+=2){
               int k=0;
               for(int iTurn=0; iTurn<nTurn; iTurn++){
                  double x0, y0, radius, start, finish, delta, r, angle, x, y;
                  int    nStep;
                  x0     = d[k++];
                  y0     = d[k++];
                  radius = d[k++];
                  start  = d[k++];
                  finish = d[k++];
                  delta=finish-start;
                  if(delta<0)
                     r = radius+iSide*adjustment;
                  else
                     r = radius-iSide*adjustment;
                  nStep = (int)(Math.abs(delta)/increment);
                  delta/=nStep;
                  for(int i=0; i<=nStep; i++){
                     angle = (start+i*delta)*Math.PI/180.0;
                     x=x0+r*Math.cos(angle);
                     y=y0+r*Math.sin(angle);
                     System.out.println("   "+nf.format(x)+",  "+nf.format(y)+",");
                  }
               }
               System.out.println("\n");
            }
         }
      }



    ABOUT REGION CODES

    The track itself is set to region 1, the inside region is set
    to region 2.   When specifying PaintSensors, use the method
    setRegionSensitivity(1) to set it sensitive to region 1.
    It will still detect (and generate sensor events) for
    region 2, but region 1 will cause the sensor to go "hot"
    and region 2 will cause it to go cold.

    In my implemation, I test to see if both sensors are cold
    and both equal zero, or both equal 2, I know that the
    simulated robot has wandered off the track.
*/


units: meters;
caption:"Simple Line-Tracing Test Plan";

wall a { geometry:   -0.125,  -0.125,  -0.125,  0.875,  0.019;  }
wall b { geometry:   -0.125,   0.875,   1.125,  0.875,  0.019;  }
wall c { geometry:    1.125,   0.875,   1.125, -0.125,  0.019;  }
wall d { geometry:    1.125,  -0.125,  -0.125, -0.125,  0.019;  }

placement startLine {
   geometry:  0.35, 0.0, 0.0, 0.05;
   color:     white;
   lineWidth: 6;
}

paint outsideTrack {
   color:  black;
   region:   1;
   geometry:
   0.8750, -0.0095,
   0.8867, -0.0090,
   0.8984, -0.0075,
   0.9098, -0.0049,
   0.9210, -0.0014,
   0.9319,  0.0031,
   0.9423,  0.0085,
   0.9522,  0.0148,
   0.9615,  0.0219,
   0.9701,  0.0299,
   0.9781,  0.0385,
   0.9852,  0.0478,
   0.9915,  0.0577,
   0.9969,  0.0681,
   1.0014,  0.0790,
   1.0049,  0.0902,
   1.0075,  0.1016,
   1.0090,  0.1133,
   1.0095,  0.1250,
   1.0095,  0.2500,
   1.0090,  0.2617,
   1.0075,  0.2734,
   1.0049,  0.2848,
   1.0014,  0.2960,
   0.9969,  0.3069,
   0.9915,  0.3173,
   0.9852,  0.3272,
   0.9781,  0.3365,
   0.9701,  0.3451,
   0.9615,  0.3531,
   0.9522,  0.3602,
   0.9423,  0.3665,
   0.9319,  0.3719,
   0.9210,  0.3764,
   0.9098,  0.3799,
   0.8984,  0.3825,
   0.8867,  0.3840,
   0.8750,  0.3845,
   0.7500,  0.3845,
   0.7399,  0.3850,
   0.7299,  0.3863,
   0.7201,  0.3885,
   0.7105,  0.3915,
   0.7012,  0.3953,
   0.6923,  0.4000,
   0.6838,  0.4054,
   0.6758,  0.4115,
   0.6683,  0.4183,
   0.6615,  0.4258,
   0.6554,  0.4338,
   0.6500,  0.4423,
   0.6453,  0.4512,
   0.6415,  0.4605,
   0.6385,  0.4701,
   0.6363,  0.4799,
   0.6350,  0.4899,
   0.6345,  0.5000,
   0.6345,  0.6250,
   0.6340,  0.6367,
   0.6325,  0.6484,
   0.6299,  0.6598,
   0.6264,  0.6710,
   0.6219,  0.6819,
   0.6165,  0.6923,
   0.6102,  0.7022,
   0.6031,  0.7115,
   0.5951,  0.7201,
   0.5865,  0.7281,
   0.5772,  0.7352,
   0.5673,  0.7415,
   0.5569,  0.7469,
   0.5460,  0.7514,
   0.5348,  0.7549,
   0.5234,  0.7575,
   0.5117,  0.7590,
   0.5000,  0.7595,
   0.2500,  0.7595,
   0.2274,  0.7585,
   0.2049,  0.7556,
   0.1828,  0.7507,
   0.1612,  0.7439,
   0.1403,  0.7352,
   0.1202,  0.7248,
   0.1011,  0.7126,
   0.0832,  0.6988,
   0.0665,  0.6835,
   0.0512,  0.6668,
   0.0374,  0.6489,
   0.0252,  0.6298,
   0.0148,  0.6097,
   0.0061,  0.5888,
  -0.0007,  0.5672,
  -0.0056,  0.5451,
  -0.0085,  0.5226,
  -0.0095,  0.5000,
  -0.0095,  0.2500,
  -0.0085,  0.2274,
  -0.0056,  0.2049,
  -0.0007,  0.1828,
   0.0061,  0.1612,
   0.0148,  0.1403,
   0.0252,  0.1202,
   0.0374,  0.1011,
   0.0512,  0.0832,
   0.0665,  0.0665,
   0.0832,  0.0512,
   0.1011,  0.0374,
   0.1202,  0.0252,
   0.1403,  0.0148,
   0.1612,  0.0061,
   0.1828,  -0.0007,
   0.2049,  -0.0056,
   0.2274,  -0.0085,
   0.2500,  -0.0095;
}

paint insideTrack {
   color:  white;
   region:   2;
   geometry:
   0.8750,  0.0095,
   0.8851,  0.0100,
   0.8951,  0.0113,
   0.9049,  0.0135,
   0.9145,  0.0165,
   0.9238,  0.0203,
   0.9327,  0.0250,
   0.9412,  0.0304,
   0.9492,  0.0365,
   0.9567,  0.0433,
   0.9635,  0.0508,
   0.9696,  0.0588,
   0.9750,  0.0673,
   0.9797,  0.0762,
   0.9835,  0.0855,
   0.9865,  0.0951,
   0.9887,  0.1049,
   0.9900,  0.1149,
   0.9905,  0.1250,
   0.9905,  0.2500,
   0.9900,  0.2601,
   0.9887,  0.2701,
   0.9865,  0.2799,
   0.9835,  0.2895,
   0.9797,  0.2988,
   0.9750,  0.3077,
   0.9696,  0.3162,
   0.9635,  0.3242,
   0.9567,  0.3317,
   0.9492,  0.3385,
   0.9412,  0.3446,
   0.9327,  0.3500,
   0.9238,  0.3547,
   0.9145,  0.3585,
   0.9049,  0.3615,
   0.8951,  0.3637,
   0.8851,  0.3650,
   0.8750,  0.3655,
   0.7500,  0.3655,
   0.7383,  0.3660,
   0.7266,  0.3675,
   0.7152,  0.3701,
   0.7040,  0.3736,
   0.6931,  0.3781,
   0.6827,  0.3835,
   0.6728,  0.3898,
   0.6635,  0.3969,
   0.6549,  0.4049,
   0.6469,  0.4135,
   0.6398,  0.4228,
   0.6335,  0.4327,
   0.6281,  0.4431,
   0.6236,  0.4540,
   0.6201,  0.4652,
   0.6175,  0.4766,
   0.6160,  0.4883,
   0.6155,  0.5000,
   0.6155,  0.6250,
   0.6150,  0.6351,
   0.6137,  0.6451,
   0.6115,  0.6549,
   0.6085,  0.6645,
   0.6047,  0.6738,
   0.6000,  0.6827,
   0.5946,  0.6912,
   0.5885,  0.6992,
   0.5817,  0.7067,
   0.5742,  0.7135,
   0.5662,  0.7196,
   0.5577,  0.7250,
   0.5488,  0.7297,
   0.5395,  0.7335,
   0.5299,  0.7365,
   0.5201,  0.7387,
   0.5101,  0.7400,
   0.5000,  0.7405,
   0.2500,  0.7405,
   0.2290,  0.7396,
   0.2082,  0.7368,
   0.1878,  0.7323,
   0.1678,  0.7260,
   0.1484,  0.7179,
   0.1298,  0.7083,
   0.1121,  0.6970,
   0.0954,  0.6842,
   0.0800,  0.6700,
   0.0658,  0.6546,
   0.0530,  0.6379,
   0.0417,  0.6202,
   0.0321,  0.6016,
   0.0240,  0.5822,
   0.0177,  0.5622,
   0.0132,  0.5418,
   0.0104,  0.5210,
   0.0095,  0.5000,
   0.0095,  0.2500,
   0.0104,  0.2290,
   0.0132,  0.2082,
   0.0177,  0.1878,
   0.0240,  0.1678,
   0.0321,  0.1484,
   0.0417,  0.1298,
   0.0530,  0.1121,
   0.0658,  0.0954,
   0.0800,  0.0800,
   0.0954,  0.0658,
   0.1121,  0.0530,
   0.1298,  0.0417,
   0.1484,  0.0321,
   0.1678,  0.0240,
   0.1878,  0.0177,
   0.2082,  0.0132,
   0.2290,  0.0104,
   0.2500,  0.0095;
}



paint finish1 {
   region:     1;
   color:      black;
   geometry:   0.245, -0.043,
               0.245,  0.043,
               0.33,  0.043,
               0.33, -0.043;
}

