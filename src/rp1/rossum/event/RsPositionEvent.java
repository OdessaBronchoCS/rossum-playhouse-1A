/*  -------------------------------------------------------------

    Rossum's Playhouse  --  a client/server based robot simulator
    Rossum's Playhouse is also known under the name "RP1".
    Copyright (C) 1999  G.W. Lucas

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

----------------------------------------------------------------- */


package rp1.rossum.event;

/*

  The RsPositionEvent is generated in response to a request from
  a client.   It gives the position and orientation of the simulated
  body.

  Although there are real-world devices that might be able to provide
  the information in an RsPositionEvent object (GPS, compass),
  few of them could provide the data with such degree of certainty.
  Developers are encouraged to be realistic when using this event in
  their client's navigation logic.

  TO DO:  change variable names from velocity and turnRate
          to be linearVelocity, rotationalVelocity to match other classes.

*/



/**
 * An event generated by the simulator on request by the
 *application to obtain position data.
 *
 */

public class RsPositionEvent extends RsEvent {

   /**
	 * 
	 */
	private static final long serialVersionUID = -6248739301459611521L;
public RsPositionEvent(
      double simTime,
      double x,
      double y,
      double orientation,
      double velocity,
      double turnRate)
   {
         super(EVT_POSITION, simTime);
         this.x           = x;
         this.y           = y;
         this.orientation = orientation;
         this.velocity    = velocity;
         this.turnRate    = turnRate;
   }

   public final double x, y;          // in meters
   public final double orientation;   // in radians
   public final double velocity;      // in meters/sec., negative if backing up, zero if pivoting
   public final double turnRate;      // in radians per second
}

