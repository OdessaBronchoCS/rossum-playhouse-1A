/*  -------------------------------------------------------------

    Rossum's Playhouse  --  a client/server based robot simulator
    Rossum's Playhouse is also known under the name "RP1".
    Copyright (C) 1999  G.W. Lucas

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

----------------------------------------------------------------- */


package rp1.rossum.event;

/*



BUGS

If you double-click the mouse button, Rs returns two mouse-click
events, the first with a click count of one, the second with a
click count of two.  I am not sure whether this is a Java feature that
I am not handling correctly or a matter of giving Java the right
specifications.

*/



/**
 * An eventgenerated by the simulator when the client clicks
 * the mouse within the simulator GUI.
 * RsMouseClickEvents occur when one of the mouse buttons is pressed
 * while the mouse pointer is within the simulation graphics area.
 * The mouse-click event is intended mainly for diagnostic and testing
 * purposes.  For example, it can be used as a way of specifying a goal
 * for a robot simulation performing navigation.
 *
 * The Rs simulation is not intended as a graphics tool and supports
 * very limited mouse interactions.  Indeed, when the Rs simulation
 * is run with the "no gui" option, the mouse-click event is not available.
 *
 * Note also that the coordinates are doubles giving the cartesian coordinates
 * of the click point in meters, not integral pixel points.  Note also that
 * unlike the java.awt counterpart, the fields are publicly available and
 * no "get" methods are provided.
 *
 */

public class RsMouseClickEvent extends RsEvent {

   /**
	 * 
	 */
	private static final long serialVersionUID = -7364874388376757264L;
public RsMouseClickEvent(
      double  simTime,
      int    button,
      int    clickCount,
      double x,
      double y){
         super(EVT_MOUSE_CLICK, simTime);
         this.button     = button;
         this.clickCount = clickCount;
         this.x          =x;
         this.y          =y;
   }

   public final int    button;       // which button was pressed [left==0, right==1]
   public final int    clickCount;   // to allow you to distinquish single and double clicks;
   public final double x, y;
}

