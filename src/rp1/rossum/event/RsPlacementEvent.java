/*  -------------------------------------------------------------

    Rossum's Playhouse  --  a client/server based robot simulator
    Rossum's Playhouse is also known under the name "RP1".
    Copyright (C) 1999  G.W. Lucas

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

----------------------------------------------------------------- */


package rp1.rossum.event;

/*

  The RsPlacementEvent is generated in response to a request from
  a client.   The simulator searches through it's floor plan for
  a "placement" specification matching the string supplied by the
  client.   A flag "valid" indicates whether a valid match was
  found.   The position and orientation of the placement is returned.
  The simulator moves the robot simulation to the placement position.

*/



/**
 * An event generated by the simulator when it accepts placement
 * of a robot.
 *
 */

public class RsPlacementEvent extends RsEvent {

   /**
	 * 
	 */
	private static final long serialVersionUID = -8786723993197052998L;
public RsPlacementEvent(
      double simTime,
      boolean valid,
      String  name,
      double  x,
      double  y,
      double  orientation){
         super(EVT_PLACEMENT, simTime);
         this.valid       = valid;
         this.name        = name;
         this.x           = x;
         this.y           = y;
         this.orientation = orientation;
   }

   /**
    * The name of the placement object from the floor plan on which
    * the robot was placed, May be null if the placement is not valid
    * or an arbitrary placement based on (x,y) coordinate was requested.
    */

   public String getName(){
      return name;
   }

   /**
    * A flag indicating that the placement request was valid.
    * This flag will be set to false if a placement would result
    * in the robot body overlapping an object such as a wall or
    * obstacle or if the named-placement designated in the request
    * is not found.
    */
   public boolean getValid(){
      return valid;
   }
   public final String  name;
   public final boolean valid;
   public final double  x, y;          // in meters
   public final double  orientation;   // in radians
}

